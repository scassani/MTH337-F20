{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q3) Suppose the list `plist` contains the first 500 prime numbers. Using list comprehension produce the\n",
    "list `mylist` of the numbers in `plist` smaller than 300 that are odd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "plist=[1,2,3,4,5,345]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5]\n"
     ]
    }
   ],
   "source": [
    "mylist = [k for k in plist if ((k < 300) and (k%2!=0))]\n",
    "print(mylist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q6) Define a function that can be called with one or two arguments. If called with two arguments it\n",
    "returns the difference of the first minus the second one. If called with one argument it returns the\n",
    "argument itself"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(a,b=0):\n",
    "    return a-b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-3"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f(4,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f(3,-5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q2) Suppose the list `plist` contains the first 500 prime numbers. Using list comprehension produce the\n",
    "list `loglist` of the logarithm of the numbers in `plist`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341003, 5.84354441703136]\n"
     ]
    }
   ],
   "source": [
    "from math import log\n",
    "\n",
    "loglist=[log(x) for x in plist]\n",
    "print(loglist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.127134385045092"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math as m\n",
    "m.log(62)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q4) Write code that creates a plot of the function\n",
    "\n",
    "$f(x) = x^2 +1$ for $0\\leq x\\leq 1$\n",
    "\n",
    "Use at least 100 points\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0] \n",
      " [1.0, 1.01, 1.04, 1.09, 1.1600000000000001, 1.25, 1.3599999999999999, 1.49, 1.6400000000000001, 1.81, 2.0]\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "n=10\n",
    "x=[k/n for k in range(n+1)]\n",
    "y=[k**2+1 for k in x]\n",
    "print(x,'\\n',y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0] \n",
      "\n",
      " [1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0]\n"
     ]
    }
   ],
   "source": [
    "# Q5\n",
    "n=10\n",
    "x=[k/n+1 for k in range(n+1)]\n",
    "x1=[x/n for x in range(n,2*n+1)]\n",
    "\n",
    "print(x,'\\n\\n',x1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should all have `find_radii_p(k,p)`, `find_radii_g(k,p)` returning a list of `k` radii (small circles) and radius of the big circle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'find_radii_p' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-22-abb941beed01>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mfind_radii_p\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m## p-series, with p =2\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'find_radii_p' is not defined"
     ]
    }
   ],
   "source": [
    "find_radii_p(3,2) ## p-series, with p =2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'find_radii_g' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-25-9481248613ae>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mfind_radii_g\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m/\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m## geometric series, with p=2\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'find_radii_g' is not defined"
     ]
    }
   ],
   "source": [
    "find_radii_g(3,1/2) ## geometric series, with p=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math as m\n",
    "A=1\n",
    "R=m.sqrt(A/m.pi) # radius of big circle (centered at origin)\n",
    "r=[0.3989422804014327, 0.28209479177387814, 0.19947114020071635]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## To plot circles:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Want to place the small circles in the picture, with no constraint on location yet\n",
    "1. pick random x coordinate\n",
    "2. pick random y coordinate\n",
    "3. place circle in the plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.patches import Circle\n",
    "import matplotlib.cm as cm # color maps\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.358420992574899"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random.random() # we get a random number in [0,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax1= plt.subplot(111)\n",
    "C=Circle((0,0),R,fc='k',zorder=1) # center, radius, color -- for big circle\n",
    "xcoord=[random.random() for x in r] # small circles centers\n",
    "ycoord=[random.random() for x in r]\n",
    "\n",
    "colors=[cm.viridis(x%1) for x in r]\n",
    "\n",
    "ax1.add_patch(C) # big circle\n",
    "\n",
    "for k in range(len(r)):\n",
    "    ax1.add_patch(Circle((xcoord[k],ycoord[k]),r[k],fc=colors[k],zorder=2)) # small circles\n",
    "plt.xlim(-1.1*R,1.1*R)\n",
    "plt.ylim(-1.1*R,1.1*R)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's split on discord:\n",
    "\n",
    "1. Can we limit circles to be all inside the [-R,R]x[-R,R] square? **room 1-3**\n",
    "\n",
    "    * shift the center of the circle to be in [-R,R] --> shift random pick from [0,1], to [-R,R]\n",
    "\n",
    "2. Can we limit the small circles to be inside the big circle, given `R`, `r=[r1,r2,r3,...]` **room 4-6**\n",
    "    \n",
    "    * for loop on small circles (k)\n",
    "        * try for each circle to place it 1000 times (try as long as we do less then 1000 tries)\n",
    "            * pick (xk,yk) at random (as in point 1.)\n",
    "            * compute `dk` the center-to-center distance between (0,0) center of big circle and center (xk,yk) of small circle\n",
    "            * compute R-rk \n",
    "            * happy if `dk`<(R-rk) --> plot circle k, now look at circle k+1\n",
    "            * not happy if `dk`>=(R-rk) --> try again --> pick xk,yk again\n",
    "        * if we fail for 1000 times straight we stop, and the problem fails\n",
    "    \n",
    "\n",
    "3. Can we limit the small circles to be disjoint **room 7-9**\n",
    "\n",
    "    * starting from 2.\n",
    "    * compute `dkh` center-to-center distance between circle k and circle h (for all circles h with h<k)\n",
    "    * check that `dkh`>rk+rh\n",
    "    \n",
    " **room 10** quiet room\n",
    " \n",
    " \n",
    " for the project,\n",
    " \n",
    "* p series , p >1 (suggestion keep p in (1,1.5] )\n",
    "\n",
    "* geom series p in [0,1)\n",
    "\n",
    "* interesting parameters: number of tries to correctly place a circle?...."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
