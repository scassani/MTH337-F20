{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# color maps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.cm as cm\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Accent',\n",
       " 'Accent_r',\n",
       " 'Blues',\n",
       " 'Blues_r',\n",
       " 'BrBG',\n",
       " 'BrBG_r',\n",
       " 'BuGn',\n",
       " 'BuGn_r',\n",
       " 'BuPu',\n",
       " 'BuPu_r',\n",
       " 'CMRmap',\n",
       " 'CMRmap_r',\n",
       " 'Dark2',\n",
       " 'Dark2_r',\n",
       " 'GnBu',\n",
       " 'GnBu_r',\n",
       " 'Greens',\n",
       " 'Greens_r',\n",
       " 'Greys',\n",
       " 'Greys_r',\n",
       " 'LUTSIZE',\n",
       " 'OrRd',\n",
       " 'OrRd_r',\n",
       " 'Oranges',\n",
       " 'Oranges_r',\n",
       " 'PRGn',\n",
       " 'PRGn_r',\n",
       " 'Paired',\n",
       " 'Paired_r',\n",
       " 'Pastel1',\n",
       " 'Pastel1_r',\n",
       " 'Pastel2',\n",
       " 'Pastel2_r',\n",
       " 'PiYG',\n",
       " 'PiYG_r',\n",
       " 'PuBu',\n",
       " 'PuBuGn',\n",
       " 'PuBuGn_r',\n",
       " 'PuBu_r',\n",
       " 'PuOr',\n",
       " 'PuOr_r',\n",
       " 'PuRd',\n",
       " 'PuRd_r',\n",
       " 'Purples',\n",
       " 'Purples_r',\n",
       " 'RdBu',\n",
       " 'RdBu_r',\n",
       " 'RdGy',\n",
       " 'RdGy_r',\n",
       " 'RdPu',\n",
       " 'RdPu_r',\n",
       " 'RdYlBu',\n",
       " 'RdYlBu_r',\n",
       " 'RdYlGn',\n",
       " 'RdYlGn_r',\n",
       " 'Reds',\n",
       " 'Reds_r',\n",
       " 'ScalarMappable',\n",
       " 'Set1',\n",
       " 'Set1_r',\n",
       " 'Set2',\n",
       " 'Set2_r',\n",
       " 'Set3',\n",
       " 'Set3_r',\n",
       " 'Spectral',\n",
       " 'Spectral_r',\n",
       " 'Wistia',\n",
       " 'Wistia_r',\n",
       " 'YlGn',\n",
       " 'YlGnBu',\n",
       " 'YlGnBu_r',\n",
       " 'YlGn_r',\n",
       " 'YlOrBr',\n",
       " 'YlOrBr_r',\n",
       " 'YlOrRd',\n",
       " 'YlOrRd_r',\n",
       " '__builtins__',\n",
       " '__cached__',\n",
       " '__doc__',\n",
       " '__file__',\n",
       " '__loader__',\n",
       " '__name__',\n",
       " '__package__',\n",
       " '__spec__',\n",
       " '_generate_cmap',\n",
       " '_reverse_cmap_spec',\n",
       " '_reverser',\n",
       " 'afmhot',\n",
       " 'afmhot_r',\n",
       " 'autumn',\n",
       " 'autumn_r',\n",
       " 'binary',\n",
       " 'binary_r',\n",
       " 'bone',\n",
       " 'bone_r',\n",
       " 'brg',\n",
       " 'brg_r',\n",
       " 'bwr',\n",
       " 'bwr_r',\n",
       " 'cbook',\n",
       " 'cividis',\n",
       " 'cividis_r',\n",
       " 'cmap_d',\n",
       " 'cmapname',\n",
       " 'cmaps_listed',\n",
       " 'colors',\n",
       " 'cool',\n",
       " 'cool_r',\n",
       " 'coolwarm',\n",
       " 'coolwarm_r',\n",
       " 'copper',\n",
       " 'copper_r',\n",
       " 'cubehelix',\n",
       " 'cubehelix_r',\n",
       " 'datad',\n",
       " 'flag',\n",
       " 'flag_r',\n",
       " 'functools',\n",
       " 'get_cmap',\n",
       " 'gist_earth',\n",
       " 'gist_earth_r',\n",
       " 'gist_gray',\n",
       " 'gist_gray_r',\n",
       " 'gist_heat',\n",
       " 'gist_heat_r',\n",
       " 'gist_ncar',\n",
       " 'gist_ncar_r',\n",
       " 'gist_rainbow',\n",
       " 'gist_rainbow_r',\n",
       " 'gist_stern',\n",
       " 'gist_stern_r',\n",
       " 'gist_yarg',\n",
       " 'gist_yarg_r',\n",
       " 'gnuplot',\n",
       " 'gnuplot2',\n",
       " 'gnuplot2_r',\n",
       " 'gnuplot_r',\n",
       " 'gray',\n",
       " 'gray_r',\n",
       " 'hot',\n",
       " 'hot_r',\n",
       " 'hsv',\n",
       " 'hsv_r',\n",
       " 'inferno',\n",
       " 'inferno_r',\n",
       " 'jet',\n",
       " 'jet_r',\n",
       " 'ma',\n",
       " 'magma',\n",
       " 'magma_r',\n",
       " 'mpl',\n",
       " 'nipy_spectral',\n",
       " 'nipy_spectral_r',\n",
       " 'np',\n",
       " 'ocean',\n",
       " 'ocean_r',\n",
       " 'pink',\n",
       " 'pink_r',\n",
       " 'plasma',\n",
       " 'plasma_r',\n",
       " 'prism',\n",
       " 'prism_r',\n",
       " 'rainbow',\n",
       " 'rainbow_r',\n",
       " 'register_cmap',\n",
       " 'revcmap',\n",
       " 'seismic',\n",
       " 'seismic_r',\n",
       " 'spring',\n",
       " 'spring_r',\n",
       " 'summer',\n",
       " 'summer_r',\n",
       " 'tab10',\n",
       " 'tab10_r',\n",
       " 'tab20',\n",
       " 'tab20_r',\n",
       " 'tab20b',\n",
       " 'tab20b_r',\n",
       " 'tab20c',\n",
       " 'tab20c_r',\n",
       " 'terrain',\n",
       " 'terrain_r',\n",
       " 'twilight',\n",
       " 'twilight_r',\n",
       " 'twilight_shifted',\n",
       " 'twilight_shifted_r',\n",
       " 'viridis',\n",
       " 'viridis_r',\n",
       " 'winter',\n",
       " 'winter_r']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir(cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "colormaps are set of colors, that can be selected assigning a value in [0,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.9835755478662053, 0.4127950788158401, 0.28835063437139563, 1.0)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm.Reds(0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=np.linspace(0,1,30)\n",
    "\n",
    "plt.figure(figsize=(10,2))\n",
    "for t in x:\n",
    "    plt.plot(t,0,'o',ms=20,color=cm.Reds(t))\n",
    "plt.title('red color map')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=np.linspace(0,1,30)\n",
    "\n",
    "plt.figure(figsize=(10,2))\n",
    "for t in x:\n",
    "    plt.plot(t,0,'o',ms=20,color=cm.viridis(t))\n",
    "plt.title('viridis color map')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ex.** create a 2x2 plot of a gradient of colormaps, with the 4 seasons. With title **Seasons, by First Last**. Post this on discord channel **seasons**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "autumn, summer,spring, winter colormaps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RGB colors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RGB (Red-Green-Blue), 1 full color, 0 no color"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(0,0,'s',ms=40,color=(0,0,1))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make other colors we need to mix RGB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.1, 1.1)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax=plt.subplot(111)\n",
    "plt.plot(0,0,'s',ms=50,color=(1,0,0)) #red\n",
    "plt.plot(1,0,'s',ms=50,color=(0,1,0)) #green\n",
    "plt.plot(0.5,1,'s',ms=50,color=(0,0,1)) #blue\n",
    "plt.plot(0.25,0.5,'s',ms=50,color=(1,0,1)) # red+ blue = magenta\n",
    "plt.plot(0.75,0.5,'s',ms=50,color=(0,1,1)) # green + clue = cyan\n",
    "plt.plot(0.5,0,'s',ms=50,color=(1,1,0)) # red + green = yellow\n",
    "plt.plot(0.5,0.5,'s',ms=50,color=(1,1,1)) # red + green + blue = white\n",
    "ax.set_facecolor((0,0,0))# black background\n",
    "plt.xlim(-0.1,1.1)\n",
    "plt.ylim(-0.1,1.1)\n",
    "#plt.axis('equal')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Multidimensional array"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Arrays can have more than one dimension"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How do we create them? One way is to start from 1-d array and then `reshape` it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12.]\n"
     ]
    }
   ],
   "source": [
    "a=np.linspace(1,12,12)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  2.  3.  4.]\n",
      " [ 5.  6.  7.  8.]\n",
      " [ 9. 10. 11. 12.]]\n"
     ]
    }
   ],
   "source": [
    "b=a.reshape(3,4)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  2.]\n",
      " [ 3.  4.]\n",
      " [ 5.  6.]\n",
      " [ 7.  8.]\n",
      " [ 9. 10.]\n",
      " [11. 12.]]\n"
     ]
    }
   ],
   "source": [
    "b=a.reshape(6,-1) # a -1 as a dimension , means thay python will authomatically find the correct dimension\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  2.]\n",
      " [ 3.  4.]\n",
      " [ 5.  6.]\n",
      " [ 7.  8.]\n",
      " [ 9. 10.]\n",
      " [11. 12.]]\n"
     ]
    }
   ],
   "source": [
    "c=a.reshape(-1,3) # a -1 as a dimension , means thay python will authomatically find the correct dimension\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12,)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 2)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 3)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.shape[0] # number of rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12.] \n",
      "\n",
      " [[ 1.  2.]\n",
      " [ 3.  4.]\n",
      " [ 5.  6.]\n",
      " [ 7.  8.]\n",
      " [ 9. 10.]\n",
      " [11. 12.]] \n",
      "\n",
      " [[ 1.  2.  3.]\n",
      " [ 4.  5.  6.]\n",
      " [ 7.  8.  9.]\n",
      " [10. 11. 12.]]\n"
     ]
    }
   ],
   "source": [
    "print(a,'\\n\\n',b,'\\n\\n',c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.  2. 13.  4.  5.  6.  7.  8.  9. 10. 11. 12.] \n",
      "\n",
      " [[ 1.  2.]\n",
      " [13.  4.]\n",
      " [ 5.  6.]\n",
      " [ 7.  8.]\n",
      " [ 9. 10.]\n",
      " [11. 12.]] \n",
      "\n",
      " [[ 1.  2. 13.]\n",
      " [ 4.  5.  6.]\n",
      " [ 7.  8.  9.]\n",
      " [10. 11. 12.]]\n"
     ]
    }
   ],
   "source": [
    "a[2]=13\n",
    "print(a,'\\n\\n',b,'\\n\\n',c)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`reshape` produces a view of the object, **NOT** a copy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "d=a.reshape(3,-1).copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.,  2., 13.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12.])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.,  2., 13.,  4.],\n",
       "       [ 5.,  6.,  7.,  8.],\n",
       "       [ 9., 10., 11., 12.]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "a[4]=123"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  1.   2.  13.   4. 123.   6.   7.   8.   9.  10.  11.  12.] [[ 1.  2. 13.  4.]\n",
      " [ 5.  6.  7.  8.]\n",
      " [ 9. 10. 11. 12.]]\n"
     ]
    }
   ],
   "source": [
    "print(a,d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 2)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How do we access elements of a multidimensional array?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  1.,   2.],\n",
       "       [ 13.,   4.],\n",
       "       [123.,   6.],\n",
       "       [  7.,   8.],\n",
       "       [  9.,  10.],\n",
       "       [ 11.,  12.]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b[4,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  1.   2.]\n",
      " [ 13.   4.]\n",
      " [123.   6.]\n",
      " [  7.   8.]\n",
      " [  9. 100.]\n",
      " [ 11.  12.]]\n"
     ]
    }
   ],
   "source": [
    "b[4,1]=100\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  1.   2.  13.   4. 123.   6.   7.   8.   9. 100.  11.  12.]\n"
     ]
    }
   ],
   "source": [
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.0"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b[4][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([123.,   6.])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b[2,:] # to access a specific row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([123.,   6.])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  2.,   4.,   6.,   8., 100.,  12.])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b[:,1] # to get a column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`np.ones`, `np.empty`, `np.zeros` work for multidimensional arrays as well"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1. 1.]]\n"
     ]
    }
   ],
   "source": [
    "e=np.ones((5,7))\n",
    "print(e)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2  3  4]\n",
      " [ 5  6  7  8  9]\n",
      " [10 11 12 13 14]]\n",
      "[[ 2  3  4  5  6]\n",
      " [ 7  8  9 10 11]\n",
      " [12 13 14 15 16]]\n"
     ]
    }
   ],
   "source": [
    "a=np.arange(15).reshape(3,5)\n",
    "b=np.arange(2,17).reshape(3,5)\n",
    "\n",
    "print(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 2  4  6  8 10]\n",
      " [12 14 16 18 20]\n",
      " [22 24 26 28 30]]\n"
     ]
    }
   ],
   "source": [
    "c=a+b\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  0   6  16  30  48]\n",
      " [ 70  96 126 160 198]\n",
      " [240 286 336 390 448]]\n"
     ]
    }
   ],
   "source": [
    "print(2*a*b) # element by element multiplication"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`@` or `dot()` to do matrix multiplication (as seen in linear algebra)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 50, 100, 150],\n",
       "       [150, 325, 500],\n",
       "       [250, 550, 850]])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a@b.transpose() # a is 3x5, b^T is 5x3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 50, 100, 150],\n",
       "       [150, 325, 500],\n",
       "       [250, 550, 850]])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.dot(b.transpose())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.69314718, 1.38629436, 1.79175947, 2.07944154, 2.30258509],\n",
       "       [2.48490665, 2.63905733, 2.77258872, 2.89037176, 2.99573227],\n",
       "       [3.09104245, 3.17805383, 3.25809654, 3.33220451, 3.40119738]])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.log(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-47-a832bb91e25d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0ma\u001b[0m\u001b[1;33m@\u001b[0m\u001b[0mb\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 5)"
     ]
    }
   ],
   "source": [
    "a@b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Slicing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2  3  4  5  6  7]\n",
      " [ 8  9 10 11 12 13 14 15]\n",
      " [16 17 18 19 20 21 22 23]\n",
      " [24 25 26 27 28 29 30 31]\n",
      " [32 33 34 35 36 37 38 39]]\n"
     ]
    }
   ],
   "source": [
    "x=np.arange(40).reshape(5,8)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[10, 11, 12],\n",
       "       [18, 19, 20],\n",
       "       [26, 27, 28]])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[1:4,2:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 8, 10, 12, 14],\n",
       "       [16, 18, 20, 22]])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[1:3,::2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "x[0,:]=np.ones(8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  1,  1,  1,  1,  1,  1,  1],\n",
       "       [ 8,  9, 10, 11, 12, 13, 14, 15],\n",
       "       [16, 17, 18, 19, 20, 21, 22, 23],\n",
       "       [24, 25, 26, 27, 28, 29, 30, 31],\n",
       "       [32, 33, 34, 35, 36, 37, 38, 39]])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can assign a single value at once"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1  1  1  1  1  1  1  1]\n",
      " [ 8  9 10 11 12 13 14 15]\n",
      " [33 33 33 33 33 33 33 33]\n",
      " [24 25 26 27 28 29 30 31]\n",
      " [32 33 34 35 36 37 38 39]]\n"
     ]
    }
   ],
   "source": [
    "x[2,:]=33\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  1,  1,  1,  1,  1,  1,  1],\n",
       "       [ 8,  9, 10, 11, 12, 13, 14, 15],\n",
       "       [33, 33,  0,  0,  0, 33, 33, 33],\n",
       "       [24, 25,  0,  0,  0, 29, 30, 31],\n",
       "       [32, 33, 34, 35, 36, 37, 38, 39]])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[2:4,2:5]=0\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  1,   1,   1,   1,   1,   1,   1,   1],\n",
       "       [  8,   9,  10,  11,  12,  13,  14,  15],\n",
       "       [ 33,  33,   0, 101, 102, 103,  33,  33],\n",
       "       [ 24,  25,   0, 104, 105, 107,  30,  31],\n",
       "       [ 32,  33,  34,  35,  36,  37,  38,  39]])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[2:4,3:6]=np.linspace(101,107,6).reshape(2,3) # we assigned one array to a sub-array\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  1   1   1   1   1   1   1   1   8   9  10  11  12  13  14  15  33  33\n",
      "   0 101 102 103  33  33  24  25   0 104 105 107  30  31  32  33  34  35\n",
      "  36  37  38  39]\n"
     ]
    }
   ],
   "source": [
    "w=x.ravel()\n",
    "print(w)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## `imshow`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.71494533 0.64926852 0.87332416]\n",
      " [0.37446117 0.52843786 0.55075167]\n",
      " [0.50090672 0.68866338 0.68741616]]\n"
     ]
    }
   ],
   "source": [
    "a=np.random.rand(3,3)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(a)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x16c405e1828>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(a,cmap='jet')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`plt.imshow()` produces a plot given a multidimensional array. (pixel by pixel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 3)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## `imshow` `interpolation` parameter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14,8))\n",
    "\n",
    "a=np.linspace(0,1,9).reshape(3,3)\n",
    "\n",
    "plt.subplot(141)\n",
    "plt.imshow(a,cmap='twilight',interpolation='nearest')\n",
    "\n",
    "plt.subplot(142)\n",
    "plt.imshow(a,cmap='twilight',interpolation='bilinear')\n",
    "\n",
    "plt.subplot(143)\n",
    "plt.imshow(a,cmap='twilight',interpolation='bicubic')\n",
    "\n",
    "plt.subplot(144)\n",
    "plt.imshow(a,cmap='twilight',interpolation='quadric')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RGB colors\n",
    "\n",
    "`b` created below contains R, G, B values\n",
    "\n",
    "* `b[:,:,0]`: contains the value of red\n",
    "* `b[:,:,1]`: contains the value of green\n",
    "* `b[:,:,2]`: contains the value of blue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[0.35412933 0.23949634 0.99862602]\n",
      "  [0.23490007 0.05171263 0.66702241]\n",
      "  [0.32103125 0.456564   0.27085988]\n",
      "  [0.42842589 0.22649253 0.37552856]\n",
      "  [0.16609196 0.56709871 0.11083436]]\n",
      "\n",
      " [[0.02931182 0.83051143 0.53259928]\n",
      "  [0.59752145 0.97241141 0.02164576]\n",
      "  [0.49453028 0.71450079 0.8563824 ]\n",
      "  [0.22580853 0.08467561 0.79998274]\n",
      "  [0.54087015 0.95378165 0.40702474]]\n",
      "\n",
      " [[0.95101781 0.40251177 0.40498606]\n",
      "  [0.47416662 0.43597934 0.94375349]\n",
      "  [0.8330774  0.50275858 0.64499201]\n",
      "  [0.25574332 0.46863328 0.97302351]\n",
      "  [0.77090849 0.139181   0.65782442]]\n",
      "\n",
      " [[0.92452415 0.33309362 0.03592772]\n",
      "  [0.70951731 0.08896272 0.23501923]\n",
      "  [0.65129502 0.30540098 0.77294798]\n",
      "  [0.91288314 0.32202676 0.39196264]\n",
      "  [0.69134195 0.42819945 0.84246391]]\n",
      "\n",
      " [[0.91784132 0.74840423 0.45007444]\n",
      "  [0.67540415 0.53040518 0.2066348 ]\n",
      "  [0.61501564 0.20140732 0.20192811]\n",
      "  [0.00784061 0.81071275 0.23058099]\n",
      "  [0.17899482 0.98352331 0.61223006]]]\n",
      "(5, 5, 3)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "b=np.random.rand(5,5,3)\n",
    "print(b) # do not rely on what you see here\n",
    "print(b.shape)\n",
    "plt.imshow(b)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.35412933 0.23490007 0.32103125 0.42842589 0.16609196]\n",
      " [0.02931182 0.59752145 0.49453028 0.22580853 0.54087015]\n",
      " [0.95101781 0.47416662 0.8330774  0.25574332 0.77090849]\n",
      " [0.92452415 0.70951731 0.65129502 0.91288314 0.69134195]\n",
      " [0.91784132 0.67540415 0.61501564 0.00784061 0.17899482]]\n"
     ]
    }
   ],
   "source": [
    "print(b[:,:,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.998626018899305"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# grab how much blue is in the first pixel \n",
    "b[0,0,2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ex.** given the image above, let's do a 1x4 subplot, with the original image, only red scale, only green scale, only blue scale, Please put your name in the image title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1008x576 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14,8))\n",
    "\n",
    "a=np.random.rand(5,5,3)\n",
    "\n",
    "plt.subplot(141)\n",
    "plt.imshow(a)\n",
    "\n",
    "plt.subplot(142)\n",
    "r=a.copy()\n",
    "r[:,:,1]=0 # remove green\n",
    "r[:,:,2]=0 # remove blue\n",
    "plt.imshow(r)\n",
    "\n",
    "plt.subplot(143)\n",
    "g=a.copy()\n",
    "g[:,:,0]=0\n",
    "g[:,:,2]=0\n",
    "plt.imshow(g)\n",
    "\n",
    "plt.subplot(144)\n",
    "b=a.copy()\n",
    "b[:,:,0]=0\n",
    "b[:,:,1]=0\n",
    "plt.imshow(b)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ex.** repoduce the 4x4 pixels image posted by me in the discord 'colors' channel. Reproduce it and post it in discord. Put you name in the title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
